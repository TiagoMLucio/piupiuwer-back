model User {
  id         String     @id @default(uuid())
  username   String     @unique
  email      String     @unique
  password   String
  firstName  String
  lastName   String
  birthDate  String
  about      String?
  avatar     String?
  pius       Piu[]
  likes      PiuLike[]
  favorites  Favorite[]
  following  Follows[]  @relation("follower")
  followedBy Follows[]  @relation("following")
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@map("users")
}

model Piu {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  favorites Favorite[]
  likes     PiuLike[]
}

model PiuLike {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  piu     Piu    @relation(fields: [piuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  piuId  String

  @@unique(fields: [userId, piuId], name: "likeId")
  @@map("likes")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId String

  @@unique(fields: [followerId, followingId], name: "followsId")
  @@map("follows")
}

model Favorite {
  userId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  piuId  String
  piu     Piu    @relation(fields: [piuId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique(fields: [userId, piuId], name: "favoriteId")
  @@map("favorites")
}
